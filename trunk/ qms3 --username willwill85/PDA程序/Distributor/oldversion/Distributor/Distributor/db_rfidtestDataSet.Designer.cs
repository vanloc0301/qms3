//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5456
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.CompactFramework.Design.Data 2.0.50727.5456 版自动生成。
// 
namespace Distributor {
    using System;
    using System.Data;
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("db_rfidtestDataSet")]
    public partial class db_rfidtestDataSet : global::System.Data.DataSet {
        
        private _dbo_GoodsDataTable _tabledbo_Goods;
        
        private _dbo_BoxDataTable _tabledbo_Box;
        
        private _dbo_DriverDataTable _tabledbo_Driver;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public db_rfidtestDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _dbo_GoodsDataTable _dbo_Goods {
            get {
                return this._tabledbo_Goods;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _dbo_BoxDataTable _dbo_Box {
            get {
                return this._tabledbo_Box;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _dbo_DriverDataTable _dbo_Driver {
            get {
                return this._tabledbo_Driver;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            db_rfidtestDataSet cln = ((db_rfidtestDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dbo.Goods"] != null)) {
                    base.Tables.Add(new _dbo_GoodsDataTable(ds.Tables["dbo.Goods"]));
                }
                if ((ds.Tables["dbo.Box"] != null)) {
                    base.Tables.Add(new _dbo_BoxDataTable(ds.Tables["dbo.Box"]));
                }
                if ((ds.Tables["dbo.Driver"] != null)) {
                    base.Tables.Add(new _dbo_DriverDataTable(ds.Tables["dbo.Driver"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this._tabledbo_Goods = ((_dbo_GoodsDataTable)(base.Tables["dbo.Goods"]));
            if ((initTable == true)) {
                if ((this._tabledbo_Goods != null)) {
                    this._tabledbo_Goods.InitVars();
                }
            }
            this._tabledbo_Box = ((_dbo_BoxDataTable)(base.Tables["dbo.Box"]));
            if ((initTable == true)) {
                if ((this._tabledbo_Box != null)) {
                    this._tabledbo_Box.InitVars();
                }
            }
            this._tabledbo_Driver = ((_dbo_DriverDataTable)(base.Tables["dbo.Driver"]));
            if ((initTable == true)) {
                if ((this._tabledbo_Driver != null)) {
                    this._tabledbo_Driver.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "db_rfidtestDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/db_rfidtestDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this._tabledbo_Goods = new _dbo_GoodsDataTable();
            base.Tables.Add(this._tabledbo_Goods);
            this._tabledbo_Box = new _dbo_BoxDataTable();
            base.Tables.Add(this._tabledbo_Box);
            this._tabledbo_Driver = new _dbo_DriverDataTable();
            base.Tables.Add(this._tabledbo_Driver);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_dbo_Goods() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_dbo_Box() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_dbo_Driver() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            db_rfidtestDataSet ds = new db_rfidtestDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void _dbo_GoodsRowChangeEventHandler(object sender, _dbo_GoodsRowChangeEvent e);
        
        public delegate void _dbo_BoxRowChangeEventHandler(object sender, _dbo_BoxRowChangeEvent e);
        
        public delegate void _dbo_DriverRowChangeEventHandler(object sender, _dbo_DriverRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _dbo_GoodsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnBoxCardID;
            
            private global::System.Data.DataColumn columnTruckNo;
            
            private global::System.Data.DataColumn columnStartTime;
            
            private global::System.Data.DataColumn columnEndTime;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnWeight;
            
            private global::System.Data.DataColumn columnStartStationID;
            
            private global::System.Data.DataColumn columnEndStationID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _dbo_GoodsDataTable() {
                this.TableName = "dbo.Goods";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _dbo_GoodsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoxCardIDColumn {
                get {
                    return this.columnBoxCardID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TruckNoColumn {
                get {
                    return this.columnTruckNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartTimeColumn {
                get {
                    return this.columnStartTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndTimeColumn {
                get {
                    return this.columnEndTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartStationIDColumn {
                get {
                    return this.columnStartStationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndStationIDColumn {
                get {
                    return this.columnEndStationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _dbo_GoodsRow this[int index] {
                get {
                    return ((_dbo_GoodsRow)(this.Rows[index]));
                }
            }
            
            public event _dbo_GoodsRowChangeEventHandler _dbo_GoodsRowChanging;
            
            public event _dbo_GoodsRowChangeEventHandler _dbo_GoodsRowChanged;
            
            public event _dbo_GoodsRowChangeEventHandler _dbo_GoodsRowDeleting;
            
            public event _dbo_GoodsRowChangeEventHandler _dbo_GoodsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_dbo_GoodsRow(_dbo_GoodsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _dbo_GoodsRow Add_dbo_GoodsRow(int ID, string BoxCardID, string TruckNo, string StartTime, string EndTime, int State, double Weight, int StartStationID, int EndStationID) {
                _dbo_GoodsRow row_dbo_GoodsRow = ((_dbo_GoodsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        BoxCardID,
                        TruckNo,
                        StartTime,
                        EndTime,
                        State,
                        Weight,
                        StartStationID,
                        EndStationID};
                row_dbo_GoodsRow.ItemArray = columnValuesArray;
                this.Rows.Add(row_dbo_GoodsRow);
                return row_dbo_GoodsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _dbo_GoodsRow FindByID(int ID) {
                return ((_dbo_GoodsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                _dbo_GoodsDataTable cln = ((_dbo_GoodsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new _dbo_GoodsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnBoxCardID = base.Columns["BoxCardID"];
                this.columnTruckNo = base.Columns["TruckNo"];
                this.columnStartTime = base.Columns["StartTime"];
                this.columnEndTime = base.Columns["EndTime"];
                this.columnState = base.Columns["State"];
                this.columnWeight = base.Columns["Weight"];
                this.columnStartStationID = base.Columns["StartStationID"];
                this.columnEndStationID = base.Columns["EndStationID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnBoxCardID = new global::System.Data.DataColumn("BoxCardID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoxCardID);
                this.columnTruckNo = new global::System.Data.DataColumn("TruckNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTruckNo);
                this.columnStartTime = new global::System.Data.DataColumn("StartTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartTime);
                this.columnEndTime = new global::System.Data.DataColumn("EndTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndTime);
                this.columnState = new global::System.Data.DataColumn("State", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnWeight = new global::System.Data.DataColumn("Weight", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeight);
                this.columnStartStationID = new global::System.Data.DataColumn("StartStationID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartStationID);
                this.columnEndStationID = new global::System.Data.DataColumn("EndStationID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndStationID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnBoxCardID.AllowDBNull = false;
                this.columnBoxCardID.MaxLength = 50;
                this.columnTruckNo.AllowDBNull = false;
                this.columnTruckNo.MaxLength = 16;
                this.columnStartTime.AllowDBNull = false;
                this.columnStartTime.MaxLength = 16;
                this.columnEndTime.AllowDBNull = false;
                this.columnEndTime.MaxLength = 16;
                this.columnState.AllowDBNull = false;
                this.columnWeight.AllowDBNull = false;
                this.columnStartStationID.AllowDBNull = false;
                this.columnEndStationID.AllowDBNull = false;
                this.ExtendedProperties.Add("Generator_TableVarName", "_tabledbo_Goods");
                this.ExtendedProperties.Add("Generator_UserTableName", "dbo.Goods");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _dbo_GoodsRow New_dbo_GoodsRow() {
                return ((_dbo_GoodsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new _dbo_GoodsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(_dbo_GoodsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._dbo_GoodsRowChanged != null)) {
                    this._dbo_GoodsRowChanged(this, new _dbo_GoodsRowChangeEvent(((_dbo_GoodsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._dbo_GoodsRowChanging != null)) {
                    this._dbo_GoodsRowChanging(this, new _dbo_GoodsRowChangeEvent(((_dbo_GoodsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._dbo_GoodsRowDeleted != null)) {
                    this._dbo_GoodsRowDeleted(this, new _dbo_GoodsRowChangeEvent(((_dbo_GoodsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._dbo_GoodsRowDeleting != null)) {
                    this._dbo_GoodsRowDeleting(this, new _dbo_GoodsRowChangeEvent(((_dbo_GoodsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_dbo_GoodsRow(_dbo_GoodsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                db_rfidtestDataSet ds = new db_rfidtestDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_dbo_GoodsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _dbo_BoxDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnBoxCardID;
            
            private global::System.Data.DataColumn columnBoxCardState;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _dbo_BoxDataTable() {
                this.TableName = "dbo.Box";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _dbo_BoxDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoxCardIDColumn {
                get {
                    return this.columnBoxCardID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoxCardStateColumn {
                get {
                    return this.columnBoxCardState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _dbo_BoxRow this[int index] {
                get {
                    return ((_dbo_BoxRow)(this.Rows[index]));
                }
            }
            
            public event _dbo_BoxRowChangeEventHandler _dbo_BoxRowChanging;
            
            public event _dbo_BoxRowChangeEventHandler _dbo_BoxRowChanged;
            
            public event _dbo_BoxRowChangeEventHandler _dbo_BoxRowDeleting;
            
            public event _dbo_BoxRowChangeEventHandler _dbo_BoxRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_dbo_BoxRow(_dbo_BoxRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _dbo_BoxRow Add_dbo_BoxRow(int ID, string BoxCardID, int BoxCardState) {
                _dbo_BoxRow row_dbo_BoxRow = ((_dbo_BoxRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        BoxCardID,
                        BoxCardState};
                row_dbo_BoxRow.ItemArray = columnValuesArray;
                this.Rows.Add(row_dbo_BoxRow);
                return row_dbo_BoxRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _dbo_BoxRow FindByID(int ID) {
                return ((_dbo_BoxRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                _dbo_BoxDataTable cln = ((_dbo_BoxDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new _dbo_BoxDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnBoxCardID = base.Columns["BoxCardID"];
                this.columnBoxCardState = base.Columns["BoxCardState"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnBoxCardID = new global::System.Data.DataColumn("BoxCardID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoxCardID);
                this.columnBoxCardState = new global::System.Data.DataColumn("BoxCardState", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoxCardState);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnBoxCardID.AllowDBNull = false;
                this.columnBoxCardID.MaxLength = 16;
                this.columnBoxCardState.AllowDBNull = false;
                this.ExtendedProperties.Add("Generator_TableVarName", "_tabledbo_Box");
                this.ExtendedProperties.Add("Generator_UserTableName", "dbo.Box");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _dbo_BoxRow New_dbo_BoxRow() {
                return ((_dbo_BoxRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new _dbo_BoxRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(_dbo_BoxRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._dbo_BoxRowChanged != null)) {
                    this._dbo_BoxRowChanged(this, new _dbo_BoxRowChangeEvent(((_dbo_BoxRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._dbo_BoxRowChanging != null)) {
                    this._dbo_BoxRowChanging(this, new _dbo_BoxRowChangeEvent(((_dbo_BoxRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._dbo_BoxRowDeleted != null)) {
                    this._dbo_BoxRowDeleted(this, new _dbo_BoxRowChangeEvent(((_dbo_BoxRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._dbo_BoxRowDeleting != null)) {
                    this._dbo_BoxRowDeleting(this, new _dbo_BoxRowChangeEvent(((_dbo_BoxRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_dbo_BoxRow(_dbo_BoxRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                db_rfidtestDataSet ds = new db_rfidtestDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_dbo_BoxDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _dbo_DriverDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnDriverCardID;
            
            private global::System.Data.DataColumn columnTruckNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _dbo_DriverDataTable() {
                this.TableName = "dbo.Driver";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _dbo_DriverDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DriverCardIDColumn {
                get {
                    return this.columnDriverCardID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TruckNoColumn {
                get {
                    return this.columnTruckNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _dbo_DriverRow this[int index] {
                get {
                    return ((_dbo_DriverRow)(this.Rows[index]));
                }
            }
            
            public event _dbo_DriverRowChangeEventHandler _dbo_DriverRowChanging;
            
            public event _dbo_DriverRowChangeEventHandler _dbo_DriverRowChanged;
            
            public event _dbo_DriverRowChangeEventHandler _dbo_DriverRowDeleting;
            
            public event _dbo_DriverRowChangeEventHandler _dbo_DriverRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_dbo_DriverRow(_dbo_DriverRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _dbo_DriverRow Add_dbo_DriverRow(int ID, string DriverCardID, string TruckNo) {
                _dbo_DriverRow row_dbo_DriverRow = ((_dbo_DriverRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        DriverCardID,
                        TruckNo};
                row_dbo_DriverRow.ItemArray = columnValuesArray;
                this.Rows.Add(row_dbo_DriverRow);
                return row_dbo_DriverRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _dbo_DriverRow FindByID(int ID) {
                return ((_dbo_DriverRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                _dbo_DriverDataTable cln = ((_dbo_DriverDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new _dbo_DriverDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnDriverCardID = base.Columns["DriverCardID"];
                this.columnTruckNo = base.Columns["TruckNo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnDriverCardID = new global::System.Data.DataColumn("DriverCardID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDriverCardID);
                this.columnTruckNo = new global::System.Data.DataColumn("TruckNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTruckNo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnDriverCardID.AllowDBNull = false;
                this.columnDriverCardID.MaxLength = 16;
                this.columnTruckNo.AllowDBNull = false;
                this.columnTruckNo.MaxLength = 16;
                this.ExtendedProperties.Add("Generator_TableVarName", "_tabledbo_Driver");
                this.ExtendedProperties.Add("Generator_UserTableName", "dbo.Driver");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _dbo_DriverRow New_dbo_DriverRow() {
                return ((_dbo_DriverRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new _dbo_DriverRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(_dbo_DriverRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._dbo_DriverRowChanged != null)) {
                    this._dbo_DriverRowChanged(this, new _dbo_DriverRowChangeEvent(((_dbo_DriverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._dbo_DriverRowChanging != null)) {
                    this._dbo_DriverRowChanging(this, new _dbo_DriverRowChangeEvent(((_dbo_DriverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._dbo_DriverRowDeleted != null)) {
                    this._dbo_DriverRowDeleted(this, new _dbo_DriverRowChangeEvent(((_dbo_DriverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._dbo_DriverRowDeleting != null)) {
                    this._dbo_DriverRowDeleting(this, new _dbo_DriverRowChangeEvent(((_dbo_DriverRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_dbo_DriverRow(_dbo_DriverRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                db_rfidtestDataSet ds = new db_rfidtestDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_dbo_DriverDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class _dbo_GoodsRow : global::System.Data.DataRow {
            
            private _dbo_GoodsDataTable _tabledbo_Goods;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _dbo_GoodsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this._tabledbo_Goods = ((_dbo_GoodsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this._tabledbo_Goods.IDColumn]));
                }
                set {
                    this[this._tabledbo_Goods.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BoxCardID {
                get {
                    return ((string)(this[this._tabledbo_Goods.BoxCardIDColumn]));
                }
                set {
                    this[this._tabledbo_Goods.BoxCardIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TruckNo {
                get {
                    return ((string)(this[this._tabledbo_Goods.TruckNoColumn]));
                }
                set {
                    this[this._tabledbo_Goods.TruckNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StartTime {
                get {
                    return ((string)(this[this._tabledbo_Goods.StartTimeColumn]));
                }
                set {
                    this[this._tabledbo_Goods.StartTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EndTime {
                get {
                    return ((string)(this[this._tabledbo_Goods.EndTimeColumn]));
                }
                set {
                    this[this._tabledbo_Goods.EndTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int State {
                get {
                    return ((int)(this[this._tabledbo_Goods.StateColumn]));
                }
                set {
                    this[this._tabledbo_Goods.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Weight {
                get {
                    return ((double)(this[this._tabledbo_Goods.WeightColumn]));
                }
                set {
                    this[this._tabledbo_Goods.WeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StartStationID {
                get {
                    return ((int)(this[this._tabledbo_Goods.StartStationIDColumn]));
                }
                set {
                    this[this._tabledbo_Goods.StartStationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EndStationID {
                get {
                    return ((int)(this[this._tabledbo_Goods.EndStationIDColumn]));
                }
                set {
                    this[this._tabledbo_Goods.EndStationIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class _dbo_BoxRow : global::System.Data.DataRow {
            
            private _dbo_BoxDataTable _tabledbo_Box;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _dbo_BoxRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this._tabledbo_Box = ((_dbo_BoxDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this._tabledbo_Box.IDColumn]));
                }
                set {
                    this[this._tabledbo_Box.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BoxCardID {
                get {
                    return ((string)(this[this._tabledbo_Box.BoxCardIDColumn]));
                }
                set {
                    this[this._tabledbo_Box.BoxCardIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BoxCardState {
                get {
                    return ((int)(this[this._tabledbo_Box.BoxCardStateColumn]));
                }
                set {
                    this[this._tabledbo_Box.BoxCardStateColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class _dbo_DriverRow : global::System.Data.DataRow {
            
            private _dbo_DriverDataTable _tabledbo_Driver;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _dbo_DriverRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this._tabledbo_Driver = ((_dbo_DriverDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this._tabledbo_Driver.IDColumn]));
                }
                set {
                    this[this._tabledbo_Driver.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DriverCardID {
                get {
                    return ((string)(this[this._tabledbo_Driver.DriverCardIDColumn]));
                }
                set {
                    this[this._tabledbo_Driver.DriverCardIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TruckNo {
                get {
                    return ((string)(this[this._tabledbo_Driver.TruckNoColumn]));
                }
                set {
                    this[this._tabledbo_Driver.TruckNoColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class _dbo_GoodsRowChangeEvent : global::System.EventArgs {
            
            private _dbo_GoodsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _dbo_GoodsRowChangeEvent(_dbo_GoodsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _dbo_GoodsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class _dbo_BoxRowChangeEvent : global::System.EventArgs {
            
            private _dbo_BoxRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _dbo_BoxRowChangeEvent(_dbo_BoxRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _dbo_BoxRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class _dbo_DriverRowChangeEvent : global::System.EventArgs {
            
            private _dbo_DriverRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _dbo_DriverRowChangeEvent(_dbo_DriverRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _dbo_DriverRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Distributor.db_rfidtestDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class dbo_GoodsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dbo_GoodsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "dbo.Goods";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("BoxCardID", "BoxCardID");
            tableMapping.ColumnMappings.Add("TruckNo", "TruckNo");
            tableMapping.ColumnMappings.Add("StartTime", "StartTime");
            tableMapping.ColumnMappings.Add("EndTime", "EndTime");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("Weight", "Weight");
            tableMapping.ColumnMappings.Add("StartStationID", "StartStationID");
            tableMapping.ColumnMappings.Add("EndStationID", "EndStationID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [rfidtest].[dbo.Goods] WHERE (([ID] = @Original_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SqlClient.SqlParameter param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [rfidtest].[dbo.Goods] ([ID], [BoxCardID], [TruckNo], [StartTime], [EndTime], [State], [Weight], [StartStationID], [EndStationID]) VALUES (@ID, @BoxCardID, @TruckNo, @StartTime, @EndTime, @State, @Weight, @StartStationID, @EndStationID);
SELECT ID, BoxCardID, TruckNo, StartTime, EndTime, State, Weight, StartStationID, EndStationID FROM [dbo.Goods] WHERE (ID = @ID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@BoxCardID";
            param.DbType = global::System.Data.DbType.StringFixedLength;
            param.IsNullable = true;
            param.SourceColumn = "BoxCardID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TruckNo";
            param.DbType = global::System.Data.DbType.StringFixedLength;
            param.IsNullable = true;
            param.SourceColumn = "TruckNo";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@StartTime";
            param.DbType = global::System.Data.DbType.StringFixedLength;
            param.IsNullable = true;
            param.SourceColumn = "StartTime";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@EndTime";
            param.DbType = global::System.Data.DbType.StringFixedLength;
            param.IsNullable = true;
            param.SourceColumn = "EndTime";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@State";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "State";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Weight";
            param.DbType = global::System.Data.DbType.Double;
            param.IsNullable = true;
            param.SourceColumn = "Weight";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@StartStationID";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "StartStationID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@EndStationID";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "EndStationID";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [rfidtest].[dbo.Goods] SET [ID] = @ID, [BoxCardID] = @BoxCardID, [TruckNo] = @TruckNo, [StartTime] = @StartTime, [EndTime] = @EndTime, [State] = @State, [Weight] = @Weight, [StartStationID] = @StartStationID, [EndStationID] = @EndStationID WHERE (([ID] = @Original_ID));
SELECT ID, BoxCardID, TruckNo, StartTime, EndTime, State, Weight, StartStationID, EndStationID FROM [dbo.Goods] WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@BoxCardID";
            param.DbType = global::System.Data.DbType.StringFixedLength;
            param.IsNullable = true;
            param.SourceColumn = "BoxCardID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TruckNo";
            param.DbType = global::System.Data.DbType.StringFixedLength;
            param.IsNullable = true;
            param.SourceColumn = "TruckNo";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@StartTime";
            param.DbType = global::System.Data.DbType.StringFixedLength;
            param.IsNullable = true;
            param.SourceColumn = "StartTime";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@EndTime";
            param.DbType = global::System.Data.DbType.StringFixedLength;
            param.IsNullable = true;
            param.SourceColumn = "EndTime";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@State";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "State";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Weight";
            param.DbType = global::System.Data.DbType.Double;
            param.IsNullable = true;
            param.SourceColumn = "Weight";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@StartStationID";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "StartStationID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@EndStationID";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "EndStationID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=db113.72dns.net;Initial Catalog=db_rfidtest;User ID=rfidtest;Password" +
                "=123456";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[5];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, BoxCardID, TruckNo, StartTime, EndTime, State, Weight, StartStationID," +
                " EndStationID FROM rfidtest.[dbo.Goods]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM [dbo.Goods]\r\nWHERE (BoxCardID = @PARAM1) AND (StartTime <> \'\') AND (E" +
                "ndTime = \'\')\r\n";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SqlClient.SqlParameter param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@PARAM1";
            param.Size = 16;
            param.IsNullable = true;
            param.SourceColumn = "BoxCardID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._commandCollection[1].Parameters.Add(param);
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "INSERT INTO [dbo.Goods]\r\n     (BoxCardID, TruckNo, StartTime, StartStationID)\r\nVA" +
                "LUES (@BoxCardID,@TruckNo,@StartTime,@StartStationID)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@BoxCardID";
            param.Size = 16;
            param.IsNullable = true;
            param.SourceColumn = "BoxCardID";
            this._commandCollection[2].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TruckNo";
            param.Size = 16;
            param.IsNullable = true;
            param.SourceColumn = "TruckNo";
            this._commandCollection[2].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@StartTime";
            param.Size = 16;
            param.IsNullable = true;
            param.SourceColumn = "StartTime";
            this._commandCollection[2].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@StartStationID";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "StartStationID";
            this._commandCollection[2].Parameters.Add(param);
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"INSERT INTO [rfidtest].[dbo.Goods] ([ID], [BoxCardID], [TruckNo], [StartTime], [EndTime], [State], [Weight], [StartStationID], [EndStationID]) VALUES (@ID, @BoxCardID, @TruckNo, @StartTime, @EndTime, @State, @Weight, @StartStationID, @EndStationID);
SELECT ID, BoxCardID, TruckNo, StartTime, EndTime, State, Weight, StartStationID, EndStationID FROM [dbo.Goods] WHERE (ID = @ID)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "ID";
            this._commandCollection[3].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@BoxCardID";
            param.Size = 16;
            param.IsNullable = true;
            param.SourceColumn = "BoxCardID";
            this._commandCollection[3].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TruckNo";
            param.Size = 16;
            param.IsNullable = true;
            param.SourceColumn = "TruckNo";
            this._commandCollection[3].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@StartTime";
            param.Size = 16;
            param.IsNullable = true;
            param.SourceColumn = "StartTime";
            this._commandCollection[3].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@EndTime";
            param.Size = 16;
            param.IsNullable = true;
            param.SourceColumn = "EndTime";
            this._commandCollection[3].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@State";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "State";
            this._commandCollection[3].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Weight";
            param.DbType = global::System.Data.DbType.Double;
            param.Size = 8;
            param.IsNullable = true;
            param.SourceColumn = "Weight";
            this._commandCollection[3].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@StartStationID";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "StartStationID";
            this._commandCollection[3].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@EndStationID";
            param.DbType = global::System.Data.DbType.Int32;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "EndStationID";
            this._commandCollection[3].Parameters.Add(param);
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "SELECT COUNT(*) AS Count\r\nFROM [dbo.Goods]\r\nWHERE (BoxCardID = @PARAM1) AND (Star" +
                "tTime <> \'\') AND (EndTime IS NULL)";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@PARAM1";
            param.Size = 16;
            param.IsNullable = true;
            param.SourceColumn = "BoxCardID";
            this._commandCollection[4].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(db_rfidtestDataSet._dbo_GoodsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual db_rfidtestDataSet._dbo_GoodsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            db_rfidtestDataSet._dbo_GoodsDataTable dataTable = new db_rfidtestDataSet._dbo_GoodsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(db_rfidtestDataSet._dbo_GoodsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(db_rfidtestDataSet dataSet) {
            return this.Adapter.Update(dataSet, "dbo.Goods");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID, string BoxCardID, string TruckNo, string StartTime, string EndTime, int State, double Weight, int StartStationID, int EndStationID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID));
            if ((BoxCardID == null)) {
                throw new global::System.ArgumentNullException("BoxCardID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(BoxCardID));
            }
            if ((TruckNo == null)) {
                throw new global::System.ArgumentNullException("TruckNo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(TruckNo));
            }
            if ((StartTime == null)) {
                throw new global::System.ArgumentNullException("StartTime");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(StartTime));
            }
            if ((EndTime == null)) {
                throw new global::System.ArgumentNullException("EndTime");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(EndTime));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(State));
            this.Adapter.InsertCommand.Parameters[6].Value = ((double)(Weight));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(StartStationID));
            this.Adapter.InsertCommand.Parameters[8].Value = ((int)(EndStationID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID, string BoxCardID, string TruckNo, string StartTime, string EndTime, int State, double Weight, int StartStationID, int EndStationID, int Original_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID));
            if ((BoxCardID == null)) {
                throw new global::System.ArgumentNullException("BoxCardID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(BoxCardID));
            }
            if ((TruckNo == null)) {
                throw new global::System.ArgumentNullException("TruckNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(TruckNo));
            }
            if ((StartTime == null)) {
                throw new global::System.ArgumentNullException("StartTime");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(StartTime));
            }
            if ((EndTime == null)) {
                throw new global::System.ArgumentNullException("EndTime");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(EndTime));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(State));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(Weight));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(StartStationID));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(EndStationID));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string BoxCardID, string TruckNo, string StartTime, string EndTime, int State, double Weight, int StartStationID, int EndStationID, int Original_ID) {
            return this.Update(Original_ID, BoxCardID, TruckNo, StartTime, EndTime, State, Weight, StartStationID, EndStationID, Original_ID);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteQueryByIdTime(string PARAM1) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((PARAM1 == null)) {
                throw new global::System.ArgumentNullException("PARAM1");
            }
            else {
                command.Parameters[0].Value = ((string)(PARAM1));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQueryDistributoer(string BoxCardID, string TruckNo, string StartTime, int StartStationID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((BoxCardID == null)) {
                throw new global::System.ArgumentNullException("BoxCardID");
            }
            else {
                command.Parameters[0].Value = ((string)(BoxCardID));
            }
            if ((TruckNo == null)) {
                throw new global::System.ArgumentNullException("TruckNo");
            }
            else {
                command.Parameters[1].Value = ((string)(TruckNo));
            }
            if ((StartTime == null)) {
                throw new global::System.ArgumentNullException("StartTime");
            }
            else {
                command.Parameters[2].Value = ((string)(StartTime));
            }
            command.Parameters[3].Value = ((int)(StartStationID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuerynew(int ID, string BoxCardID, string TruckNo, string StartTime, string EndTime, global::System.Nullable<int> State, global::System.Nullable<double> Weight, global::System.Nullable<int> StartStationID, global::System.Nullable<int> EndStationID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            command.Parameters[0].Value = ((int)(ID));
            if ((BoxCardID == null)) {
                throw new global::System.ArgumentNullException("BoxCardID");
            }
            else {
                command.Parameters[1].Value = ((string)(BoxCardID));
            }
            if ((TruckNo == null)) {
                throw new global::System.ArgumentNullException("TruckNo");
            }
            else {
                command.Parameters[2].Value = ((string)(TruckNo));
            }
            if ((StartTime == null)) {
                throw new global::System.ArgumentNullException("StartTime");
            }
            else {
                command.Parameters[3].Value = ((string)(StartTime));
            }
            if ((EndTime == null)) {
                throw new global::System.ArgumentNullException("EndTime");
            }
            else {
                command.Parameters[4].Value = ((string)(EndTime));
            }
            if ((State.HasValue == true)) {
                command.Parameters[5].Value = ((int)(State.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Weight.HasValue == true)) {
                command.Parameters[6].Value = ((double)(Weight.Value));
            }
            else {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((StartStationID.HasValue == true)) {
                command.Parameters[7].Value = ((int)(StartStationID.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((EndStationID.HasValue == true)) {
                command.Parameters[8].Value = ((int)(EndStationID.Value));
            }
            else {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Nullable<int> ScalarQueryByBoxIdTryInsert(string PARAM1) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            if ((PARAM1 == null)) {
                throw new global::System.ArgumentNullException("PARAM1");
            }
            else {
                command.Parameters[0].Value = ((string)(PARAM1));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<int>();
            }
            else {
                return new global::System.Nullable<int>(((int)(returnValue)));
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class dbo_BoxTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dbo_BoxTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "dbo.Box";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("BoxCardID", "BoxCardID");
            tableMapping.ColumnMappings.Add("BoxCardState", "BoxCardState");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo.Box] WHERE (([ID] = @Original_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SqlClient.SqlParameter param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo.Box] ([ID], [BoxCardID], [BoxCardState]) VALUES (@ID, @BoxCardID" +
                ", @BoxCardState);\r\nSELECT ID, BoxCardID, BoxCardState FROM [dbo.Box] WHERE (ID =" +
                " @ID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@BoxCardID";
            param.DbType = global::System.Data.DbType.StringFixedLength;
            param.IsNullable = true;
            param.SourceColumn = "BoxCardID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@BoxCardState";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "BoxCardState";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo.Box] SET [ID] = @ID, [BoxCardID] = @BoxCardID, [BoxCardState] = @BoxC" +
                "ardState WHERE (([ID] = @Original_ID));\r\nSELECT ID, BoxCardID, BoxCardState FROM" +
                " [dbo.Box] WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@BoxCardID";
            param.DbType = global::System.Data.DbType.StringFixedLength;
            param.IsNullable = true;
            param.SourceColumn = "BoxCardID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@BoxCardState";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "BoxCardState";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=db113.72dns.net;Initial Catalog=db_rfidtest;User ID=rfidtest;Password" +
                "=123456";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, BoxCardID, BoxCardState\r\nFROM [dbo.Box]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT COUNT(*) AS Count FROM [dbo.Box]\r\nWHERE (BoxCardID = @PARAM1) AND (BoxCard" +
                "State = 1)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SqlClient.SqlParameter param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@PARAM1";
            param.Size = 16;
            param.IsNullable = true;
            param.SourceColumn = "BoxCardID";
            this._commandCollection[1].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(db_rfidtestDataSet._dbo_BoxDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual db_rfidtestDataSet._dbo_BoxDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            db_rfidtestDataSet._dbo_BoxDataTable dataTable = new db_rfidtestDataSet._dbo_BoxDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(db_rfidtestDataSet._dbo_BoxDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(db_rfidtestDataSet dataSet) {
            return this.Adapter.Update(dataSet, "dbo.Box");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID, string BoxCardID, int BoxCardState) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID));
            if ((BoxCardID == null)) {
                throw new global::System.ArgumentNullException("BoxCardID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(BoxCardID));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(BoxCardState));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID, string BoxCardID, int BoxCardState, int Original_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID));
            if ((BoxCardID == null)) {
                throw new global::System.ArgumentNullException("BoxCardID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(BoxCardID));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(BoxCardState));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string BoxCardID, int BoxCardState, int Original_ID) {
            return this.Update(Original_ID, BoxCardID, BoxCardState, Original_ID);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual object ScalarQueryByIdState(string PARAM1) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((PARAM1 == null)) {
                throw new global::System.ArgumentNullException("PARAM1");
            }
            else {
                command.Parameters[0].Value = ((string)(PARAM1));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    public partial class dbo_DriverTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dbo_DriverTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "dbo.Driver";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("DriverCardID", "DriverCardID");
            tableMapping.ColumnMappings.Add("TruckNo", "TruckNo");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo.Driver] WHERE (([ID] = @Original_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SqlClient.SqlParameter param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo.Driver] ([ID], [DriverCardID], [TruckNo]) VALUES (@ID, @DriverCa" +
                "rdID, @TruckNo);\r\nSELECT ID, DriverCardID, TruckNo FROM [dbo.Driver] WHERE (ID =" +
                " @ID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DriverCardID";
            param.DbType = global::System.Data.DbType.StringFixedLength;
            param.IsNullable = true;
            param.SourceColumn = "DriverCardID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TruckNo";
            param.DbType = global::System.Data.DbType.StringFixedLength;
            param.IsNullable = true;
            param.SourceColumn = "TruckNo";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo.Driver] SET [ID] = @ID, [DriverCardID] = @DriverCardID, [TruckNo] = @" +
                "TruckNo WHERE (([ID] = @Original_ID));\r\nSELECT ID, DriverCardID, TruckNo FROM [d" +
                "bo.Driver] WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DriverCardID";
            param.DbType = global::System.Data.DbType.StringFixedLength;
            param.IsNullable = true;
            param.SourceColumn = "DriverCardID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TruckNo";
            param.DbType = global::System.Data.DbType.StringFixedLength;
            param.IsNullable = true;
            param.SourceColumn = "TruckNo";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=db113.72dns.net;Initial Catalog=db_rfidtest;User ID=rfidtest;Password" +
                "=123456";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, DriverCardID, TruckNo\r\nFROM [dbo.Driver]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT COUNT(*) AS Count\r\nFROM [dbo.Driver]\r\nWHERE (DriverCardID = @PARAM1) AND (" +
                "TruckNo = @PARAM2)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SqlClient.SqlParameter param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@PARAM1";
            param.Size = 16;
            param.IsNullable = true;
            param.SourceColumn = "DriverCardID";
            this._commandCollection[1].Parameters.Add(param);
            param = new global::System.Data.SqlClient.SqlParameter();
            param.ParameterName = "@PARAM2";
            param.Size = 16;
            param.IsNullable = true;
            param.SourceColumn = "TruckNo";
            this._commandCollection[1].Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(db_rfidtestDataSet._dbo_DriverDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual db_rfidtestDataSet._dbo_DriverDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            db_rfidtestDataSet._dbo_DriverDataTable dataTable = new db_rfidtestDataSet._dbo_DriverDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(db_rfidtestDataSet._dbo_DriverDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(db_rfidtestDataSet dataSet) {
            return this.Adapter.Update(dataSet, "dbo.Driver");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID, string DriverCardID, string TruckNo) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID));
            if ((DriverCardID == null)) {
                throw new global::System.ArgumentNullException("DriverCardID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DriverCardID));
            }
            if ((TruckNo == null)) {
                throw new global::System.ArgumentNullException("TruckNo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(TruckNo));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID, string DriverCardID, string TruckNo, int Original_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID));
            if ((DriverCardID == null)) {
                throw new global::System.ArgumentNullException("DriverCardID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DriverCardID));
            }
            if ((TruckNo == null)) {
                throw new global::System.ArgumentNullException("TruckNo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(TruckNo));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string DriverCardID, string TruckNo, int Original_ID) {
            return this.Update(Original_ID, DriverCardID, TruckNo, Original_ID);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual object ScalarQueryByCardIdNo(string PARAM1, string PARAM2) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((PARAM1 == null)) {
                throw new global::System.ArgumentNullException("PARAM1");
            }
            else {
                command.Parameters[0].Value = ((string)(PARAM1));
            }
            if ((PARAM2 == null)) {
                throw new global::System.ArgumentNullException("PARAM2");
            }
            else {
                command.Parameters[1].Value = ((string)(PARAM2));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
}
namespace db_rfidtestDataSetUtil {
    using System;
    using System.Data;
    
    
    public partial class DesignerUtil {
        
        public static bool IsDesignTime() {
            // Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("B77A5C561934E089")) {
                    return true;
                }
            }
            return false;
        }
        
        public static bool IsRunTime() {
            // Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            System.Reflection.Assembly mscorlibAssembly = typeof(int).Assembly;
            if ((mscorlibAssembly != null)) {
                if (mscorlibAssembly.FullName.ToUpper().EndsWith("969DB8053D3322AC")) {
                    return true;
                }
            }
            return false;
        }
    }
}
